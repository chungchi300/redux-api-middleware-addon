{"version":3,"file":"index.min.js","sources":["../../src/common/helpers/api.js","../../src/common/actions/index.js","../../src/common/reducers/api.js","../../src/common/reducers/network.js","../../src/common/reducers/domain.js","../../src/common/reducers/index.js","../../src/lib.js"],"sourcesContent":["import FormData from 'form-data';\nimport { stringify } from 'query-string';\n// ['REQUEST', 'SUCESS', 'FAILURE'];\nimport _ from 'lodash';\n// mapById(['entity']);\n// defaultGuessing by name;\nexport const BASIC = ['REQUEST', 'SUCCESS', 'FAILURE'];\nexport function entity(name) {\n  return [\n    'REQUEST',\n    {\n      type: 'SUCCESS',\n      meta: { data: name },\n      payload: (action, state, res) => {\n        return res.json();\n      },\n    },\n    'FAILURE',\n  ];\n}\nexport function formData(dataMap, contentType) {\n  if (!dataMap) return null;\n  if (contentType === 'multipart/form-data') {\n    let formData = new FormData();\n\n    Object.keys(dataMap).forEach(key => formData.append(key, dataMap[key]));\n\n    return formData;\n  } else if (contentType === 'application/x-www-form-urlencoded') {\n    return stringify(dataMap);\n  } else if (contentType === 'application/json') {\n    return JSON.stringify(dataMap);\n  } else {\n    throw new Error('unknown contentType');\n  }\n}\nexport function processType(types, pathName) {\n  let originalTypes = _.cloneDeep(types);\n  let processedTypes = [];\n\n  originalTypes = originalTypes.map(originalType => {\n    if (typeof originalType == 'string') {\n      return { type: originalType };\n    } else {\n      return originalType;\n    }\n  });\n\n  processedTypes[0] = {\n    ...originalTypes[0],\n    meta: {\n      source: pathName,\n      ...originalTypes[0].meta,\n    },\n  };\n  processedTypes[1] = {\n    ...originalTypes[1],\n    meta: {\n      source: pathName,\n      ...originalTypes[1].meta,\n    },\n  };\n  processedTypes[2] = {\n    ...originalTypes[2],\n    meta: {\n      source: pathName,\n      ...originalTypes[2].meta,\n    },\n  };\n\n  return processedTypes;\n}\nexport function subsituteUrl(url, substitues) {\n  let finalUrl = url;\n\n  Object.keys(substitues).forEach((key, index) => {\n    finalUrl = finalUrl.replace('{' + key + '}', substitues[key]);\n  });\n  return finalUrl;\n}\n","import URI from 'urijs';\nimport { CALL_API } from 'redux-api-middleware';\nimport { stringify } from 'query-string';\nimport _ from 'lodash';\nimport { subsituteUrl, formData, processType } from 'helpers/api';\nexport function setProtocol(protocol) {\n  return {\n    type: 'API:SET_PROTOCOL',\n    payload: protocol,\n  };\n}\nexport function setSwagger(swagger) {\n  return {\n    type: 'API:SET_SWAGGER',\n    payload: swagger,\n  };\n}\nexport function setHeaders(headers) {\n  return {\n    type: 'API:SET_BASE_HEADERS',\n    payload: {\n      headers: headers,\n    },\n  };\n}\nexport function request(pathName, { method, data, subst }, types) {\n  return async (dispatch, getState) => {\n    const pathEntity = _.get(getState().api.paths, pathName);\n    let realPath = pathName;\n\n    if (subst) {\n      realPath = subsituteUrl(realPath, subst);\n    }\n\n    // //TODO Header should be create by Header constructor instead of plain object\n    let headers = {\n      ...getState().api.headers,\n      ...pathEntity.headers,\n    };\n    let body;\n    if (method == 'get') {\n      realPath = realPath + '?' + stringify(data);\n    } else {\n      body = formData(data, headers['Content-Type']);\n    }\n\n    if (headers['Content-Type'] === 'multipart/form-data') {\n      delete headers['Content-Type'];\n      delete headers['content-type'];\n    }\n    //\n    const result = {\n      endpoint:\n        getState().api.protocol +\n        '://' +\n        getState().api.host +\n        getState().api.basePath +\n        realPath,\n      method: method,\n\n      headers: headers,\n      body: body,\n      types: processType(types, pathName),\n    };\n\n    return await dispatch({\n      [CALL_API]: result,\n    });\n  };\n}\n","export default function api(state = { protocol: 'http', headers: {} }, action) {\n  switch (action.type) {\n    case 'API:SET_BASE_HEADERS':\n      return { ...state, headers: action.payload.headers };\n    case 'API:SET_SWAGGER':\n      return { ...state, ...action.payload };\n    case 'API:SET_PROTOCOL':\n      return { ...state, protocol: action.payload };\n  }\n  return state;\n}\n","export default function network(state = {}, action) {\n  switch (true) {\n    case action.type == 'SUCCESS':\n      return { ...state, [action.meta.source]: 'SUCCESS' };\n\n    case action.type == 'FAILURE':\n      return { ...state, [action.meta.source]: 'FAILURE' };\n\n    case action.type == 'REQUEST':\n      return { ...state, [action.meta.source]: 'REQUEST' };\n  }\n  return state;\n}\n","import _ from 'lodash';\nexport default function domain(state = {}, action) {\n  let idsRegexResult = /^(.+)S_BY_ID$/.exec(_.get(action, 'meta.data'));\n\n  switch (true) {\n    case idsRegexResult != null:\n      let relatedIdsName = _.camelCase(idsRegexResult[1]) + 'sById';\n      let newObjectWithIds = {};\n      newObjectWithIds[relatedIdsName] = action.payload;\n\n      return { ...state, ...newObjectWithIds };\n  }\n  return state;\n}\n","import api from './api';\nimport network from './network';\nimport domain from './domain';\nconst rootReducer = function(state = {}, action) {\n  return {\n    api: api(state.api, action),\n    network: network(state.network, action),\n    domain: domain(state.domain, action),\n  };\n};\nexport default rootReducer;\n","import * as Action from 'actions';\nimport * as Helper from 'helpers/api';\nimport * as Reducer from 'reducers';\nexport default {\n  Action,\n  Helper,\n  Reducer,\n};\n"],"names":["BASIC","entity","name","data","action","state","res","json","formData","dataMap","contentType","FormData","forEach","append","key","stringify","Error","processType","types","pathName","originalTypes","_","cloneDeep","processedTypes","map","originalType","type","meta","subsituteUrl","url","substitues","finalUrl","index","replace","setProtocol","protocol","setSwagger","swagger","setHeaders","headers","request","method","subst","dispatch","getState","get","api","paths","realPath","pathEntity","host","basePath","body","CALL_API","result","payload","network","source","domain","idsRegexResult","exec","relatedIdsName","camelCase","newObjectWithIds","rootReducer"],"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"}