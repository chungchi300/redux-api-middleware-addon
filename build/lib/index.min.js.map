{"version":3,"file":"index.min.js","sources":["../../src/common/helpers/api.js","../../src/common/actions/index.js","../../src/common/reducers/api.js","../../src/common/reducers/domain.js","../../src/common/reducers/network.js","../../src/export/reducers.js","../../src/export/lib.js"],"sourcesContent":["import FormData from 'form-data';\nimport { stringify } from 'query-string';\n\n// ['REQUEST', 'SUCESS', 'FAILURE'];\nimport _ from 'lodash';\n// mapById(['entity']);\n// defaultGuessing by name;\nexport const BASIC = ['REQUEST', 'SUCCESS', 'FAILURE'];\nexport function entity(name) {\n  return [\n    'REQUEST',\n    {\n      type: 'SUCCESS',\n      meta: { data: name },\n      payload: (action, state, res) => {\n        return res.json();\n      },\n    },\n    'FAILURE',\n  ];\n}\nexport function formData(dataMap, contentType) {\n  if (!dataMap) return null;\n  if (contentType === 'multipart/form-data') {\n    let formData = new FormData();\n\n    Object.keys(dataMap).forEach(key => formData.append(key, dataMap[key]));\n\n    return formData;\n  } else if (contentType === 'application/x-www-form-urlencoded') {\n    return stringify(dataMap);\n  } else if (contentType === 'application/json') {\n    return JSON.stringify(dataMap);\n  } else {\n    throw new Error('unknown contentType for ' + contentType);\n  }\n}\nfunction getConventionalName(pathName, method) {\n  return (\n    method +\n    pathName\n      .replace(/\\{.*\\}/g, '')\n      .replace(/\\/(.)/g, function($1) {\n        return $1.toUpperCase();\n      })\n      .replace(/\\//g, '')\n  );\n}\nexport function processType(types, pathName, method) {\n  let originalTypes = _.cloneDeep(types);\n  let processedTypes = [];\n\n  originalTypes = originalTypes.map(originalType => {\n    if (typeof originalType == 'string') {\n      return { type: originalType };\n    } else {\n      return originalType;\n    }\n  });\n  console.log('types', types);\n  processedTypes[0] = {\n    ...originalTypes[0],\n    meta: {\n      path: pathName,\n      name: getConventionalName(pathName, method),\n      method: method,\n      ...originalTypes[0].meta,\n    },\n  };\n  processedTypes[1] = {\n    ...originalTypes[1],\n    meta: {\n      path: pathName,\n      name: getConventionalName(pathName, method),\n      method: method,\n      ...originalTypes[1].meta,\n    },\n  };\n  processedTypes[2] = {\n    ...originalTypes[2],\n    meta: {\n      path: pathName,\n      name: getConventionalName(pathName, method),\n      method: method,\n      ...originalTypes[2].meta,\n    },\n  };\n\n  return processedTypes;\n}\nexport function subsituteUrl(url, substitues) {\n  let finalUrl = url;\n\n  Object.keys(substitues).forEach((key, index) => {\n    finalUrl = finalUrl.replace('{' + key + '}', substitues[key]);\n  });\n  return finalUrl;\n}\n","import URI from 'urijs';\nimport { CALL_API } from 'redux-api-middleware';\nimport { stringify } from 'query-string';\nimport _ from 'lodash';\nimport { subsituteUrl, formData, processType } from 'helpers/api';\nexport function setProtocol(protocol) {\n  return {\n    type: 'API:SET_PROTOCOL',\n    payload: protocol,\n  };\n}\n\nexport function setSwagger(swagger) {\n  return {\n    type: 'API:SET_SWAGGER',\n    payload: swagger,\n  };\n}\nexport function setHeaders(headers) {\n  return {\n    type: 'API:SET_BASE_HEADERS',\n    payload: {\n      headers: headers,\n    },\n  };\n}\nexport function request(pathName, { method, data, subst }, types) {\n  return async (dispatch, getState) => {\n    const pathEntity = _.get(getState().api.paths, pathName);\n\n    let entityPath = pathName;\n    if (subst) {\n      entityPath = subsituteUrl(pathName, subst);\n    }\n    let realPath = entityPath;\n\n    // //TODO Header should be create by Header constructor instead of plain object\n    let headers = {\n      ...getState().api.headers,\n      ...pathEntity.headers,\n    };\n    let body;\n    if (method == 'get') {\n      realPath = realPath + '?' + stringify(data);\n    } else {\n      body = formData(data, headers['Content-Type']);\n    }\n\n    if (headers['Content-Type'] === 'multipart/form-data') {\n      delete headers['Content-Type'];\n      delete headers['content-type'];\n    }\n    //\n    const result = {\n      endpoint:\n        getState().api.protocol +\n        '://' +\n        getState().api.host +\n        getState().api.basePath +\n        realPath,\n      method: method,\n\n      headers: headers,\n      body: body,\n      types: processType(types, pathName, method),\n    };\n\n    return await dispatch({\n      [CALL_API]: result,\n    });\n  };\n}\n","export default function api(\n  state = { protocol: 'http', contentType: '', headers: {} },\n  action\n) {\n  switch (action.type) {\n    case 'API:SET_BASE_HEADERS':\n      return { ...state, headers: action.payload.headers };\n    case 'API:SET_SWAGGER':\n      return { ...state, ...action.payload };\n    case 'API:SET_PROTOCOL':\n      return { ...state, protocol: action.payload };\n  }\n  return state;\n}\n","import _ from 'lodash';\nexport default function domain(state = {}, action) {\n  let idsRegexResult = /^(.+)S_BY_ID$/.exec(_.get(action, 'meta.data'));\n\n  switch (true) {\n    case idsRegexResult != null:\n      let relatedIdsName = _.camelCase(idsRegexResult[1]) + 'sById';\n      let newObjectWithIds = {};\n      newObjectWithIds[relatedIdsName] = action.payload;\n\n      return { ...state, ...newObjectWithIds };\n  }\n  return state;\n}\n","export default function network(state = {}, action) {\n  switch (true) {\n    case action.type == 'SUCCESS':\n      console.log('action', action);\n      return {\n        ...state,\n        [action.meta.name]: 'SUCCESS',\n      };\n\n    case action.type == 'FAILURE':\n      return {\n        ...state,\n        [action.meta.name]: 'FAILURE',\n      };\n\n    case action.type == 'REQUEST':\n      return {\n        ...state,\n        [action.meta.name]: 'REQUEST',\n      };\n  }\n  return state;\n}\n","import api from 'reducers/api';\nimport domain from 'reducers/domain';\nimport network from 'reducers/network';\n\nexport default {\n  domain,\n  network,\n  api,\n};\n","import * as Action from 'actions';\nimport * as Helper from 'helpers/api';\nimport Reducer from './reducers';\nexport default {\n  Action,\n  Helper,\n  Reducer,\n};\n"],"names":["BASIC","entity","name","data","action","state","res","json","formData","dataMap","contentType","FormData","keys","forEach","append","key","stringify","JSON","Error","getConventionalName","pathName","method","replace","$1","toUpperCase","processType","types","originalTypes","_","cloneDeep","processedTypes","map","originalType","type","log","meta","subsituteUrl","url","substitues","finalUrl","index","setProtocol","protocol","setSwagger","swagger","setHeaders","headers","request","subst","dispatch","getState","get","api","paths","entityPath","pathEntity","realPath","host","basePath","body","CALL_API","result","payload","domain","idsRegexResult","exec","relatedIdsName","camelCase","newObjectWithIds","network"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA,AACA;;AAEA,AAAO,IAAMA,QAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAAd;AACP,AAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;SACpB,CACL,SADK,EAEL;UACQ,SADR;UAEQ,EAAEC,MAAMD,IAAR,EAFR;aAGW,iBAACE,MAAD,EAASC,KAAT,EAAgBC,GAAhB,EAAwB;aACxBA,IAAIC,IAAJ,EAAP;;GANC,EASL,SATK,CAAP;;AAYF,AAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,WAA3B,EAAwC;MACzC,CAACD,OAAL,EAAc,OAAO,IAAP;MACVC,gBAAgB,qBAApB,EAA2C;QACrCF,YAAW,IAAIG,QAAJ,EAAf;;WAEOC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA6B;aAAOL,UAASM,MAAT,CAAgBC,GAAhB,EAAqBN,QAAQM,GAAR,CAArB,CAAP;KAA7B;;WAEOP,SAAP;GALF,MAMO,IAAIE,gBAAgB,mCAApB,EAAyD;WACvDM,sBAAUP,OAAV,CAAP;GADK,MAEA,IAAIC,gBAAgB,kBAApB,EAAwC;WACtCO,KAAKD,SAAL,CAAeP,OAAf,CAAP;GADK,MAEA;UACC,IAAIS,KAAJ,CAAU,6BAA6BR,WAAvC,CAAN;;;AAGJ,SAASS,mBAAT,CAA6BC,QAA7B,EAAuCC,MAAvC,EAA+C;SAE3CA,SACAD,SACGE,OADH,CACW,SADX,EACsB,EADtB,EAEGA,OAFH,CAEW,QAFX,EAEqB,UAASC,EAAT,EAAa;WACvBA,GAAGC,WAAH,EAAP;GAHJ,EAKGF,OALH,CAKW,KALX,EAKkB,EALlB,CAFF;;AAUF,AAAO,SAASG,WAAT,CAAqBC,KAArB,EAA4BN,QAA5B,EAAsCC,MAAtC,EAA8C;MAC/CM,gBAAgBC,EAAEC,SAAF,CAAYH,KAAZ,CAApB;MACII,iBAAiB,EAArB;;kBAEgBH,cAAcI,GAAd,CAAkB,wBAAgB;QAC5C,OAAOC,YAAP,IAAuB,QAA3B,EAAqC;aAC5B,EAAEC,MAAMD,YAAR,EAAP;KADF,MAEO;aACEA,YAAP;;GAJY,CAAhB;UAOQE,GAAR,CAAY,OAAZ,EAAqBR,KAArB;iBACe,CAAf,iBACKC,cAAc,CAAd,CADL;;YAGUP,QADR;YAEQD,oBAAoBC,QAApB,EAA8BC,MAA9B,CAFR;cAGUA;OACLM,cAAc,CAAd,EAAiBQ,IAJtB;;iBAOa,CAAf,iBACKR,cAAc,CAAd,CADL;;YAGUP,QADR;YAEQD,oBAAoBC,QAApB,EAA8BC,MAA9B,CAFR;cAGUA;OACLM,cAAc,CAAd,EAAiBQ,IAJtB;;iBAOa,CAAf,iBACKR,cAAc,CAAd,CADL;;YAGUP,QADR;YAEQD,oBAAoBC,QAApB,EAA8BC,MAA9B,CAFR;cAGUA;OACLM,cAAc,CAAd,EAAiBQ,IAJtB;;;SAQKL,cAAP;;AAEF,AAAO,SAASM,YAAT,CAAsBC,GAAtB,EAA2BC,UAA3B,EAAuC;MACxCC,WAAWF,GAAf;;SAEOzB,IAAP,CAAY0B,UAAZ,EAAwBzB,OAAxB,CAAgC,UAACE,GAAD,EAAMyB,KAAN,EAAgB;eACnCD,SAASjB,OAAT,CAAiB,MAAMP,GAAN,GAAY,GAA7B,EAAkCuB,WAAWvB,GAAX,CAAlC,CAAX;GADF;SAGOwB,QAAP;;;;;;;;;;;;;AC3FK,SAASE,WAAT,CAAqBC,QAArB,EAA+B;SAC7B;UACC,kBADD;aAEIA;GAFX;;;AAMF,AAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;SAC3B;UACC,iBADD;aAEIA;GAFX;;AAKF,AAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;SAC3B;UACC,sBADD;aAEI;eACEA;;GAHb;;AAOF,AAAO,SAASC,OAAT,CAAiB3B,QAAjB,QAAoDM,KAApD,EAA2D;;;MAA9BL,MAA8B,QAA9BA,MAA8B;MAAtBlB,IAAsB,QAAtBA,IAAsB;MAAhB6C,KAAgB,QAAhBA,KAAgB;;;yDACzD,iBAAOC,QAAP,EAAiBC,QAAjB;;;;;;wBAAA,GACctB,EAAEuB,GAAF,CAAMD,WAAWE,GAAX,CAAeC,KAArB,EAA4BjC,QAA5B,CADd;wBAAA,GAGYA,QAHZ;;kBAID4B,KAAJ,EAAW;6BACIZ,aAAahB,QAAb,EAAuB4B,KAAvB,CAAb;;sBALG,GAOUM,UAPV;;;;qBAAA,gBAWAJ,WAAWE,GAAX,CAAeN,OAXf,EAYAS,WAAWT,OAZX;kBAAA;;kBAeDzB,UAAU,KAAd,EAAqB;2BACRmC,WAAW,GAAX,GAAiBxC,sBAAUb,IAAV,CAA5B;eADF,MAEO;uBACEK,SAASL,IAAT,EAAe2C,QAAQ,cAAR,CAAf,CAAP;;;kBAGEA,QAAQ,cAAR,MAA4B,qBAAhC,EAAuD;uBAC9CA,QAAQ,cAAR,CAAP;uBACOA,QAAQ,cAAR,CAAP;;;oBAvBG,GA0BU;0BAEXI,WAAWE,GAAX,CAAeV,QAAf,GACA,KADA,GAEAQ,WAAWE,GAAX,CAAeK,IAFf,GAGAP,WAAWE,GAAX,CAAeM,QAHf,GAIAF,QANW;wBAOLnC,MAPK;;yBASJyB,OATI;sBAUPa,IAVO;uBAWNlC,YAAYC,KAAZ,EAAmBN,QAAnB,EAA6BC,MAA7B;eArCJ;;qBAwCQ4B,4BACVW,2BADU,EACCC,MADD,EAxCR;;;;;;;;;;;KAAP;;;;;;;;;;;;;;;;;AC3Ba,SAAST,GAAT,GAGb;MAFA/C,KAEA,uEAFQ,EAAEqC,UAAU,MAAZ,EAAoBhC,aAAa,EAAjC,EAAqCoC,SAAS,EAA9C,EAER;MADA1C,MACA;;UACQA,OAAO6B,IAAf;SACO,sBAAL;0BACc5B,KAAZ,IAAmByC,SAAS1C,OAAO0D,OAAP,CAAehB,OAA3C;SACG,iBAAL;0BACczC,KAAZ,EAAsBD,OAAO0D,OAA7B;SACG,kBAAL;0BACczD,KAAZ,IAAmBqC,UAAUtC,OAAO0D,OAApC;;SAEGzD,KAAP;;;ACXa,SAAS0D,MAAT,GAAoC;MAApB1D,KAAoB,uEAAZ,EAAY;MAARD,MAAQ;;MAC7C4D,iBAAiB,gBAAgBC,IAAhB,CAAqBrC,EAAEuB,GAAF,CAAM/C,MAAN,EAAc,WAAd,CAArB,CAArB;;UAEQ,IAAR;SACO4D,kBAAkB,IAAvB;UACME,iBAAiBtC,EAAEuC,SAAF,CAAYH,eAAe,CAAf,CAAZ,IAAiC,OAAtD;UACII,mBAAmB,EAAvB;uBACiBF,cAAjB,IAAmC9D,OAAO0D,OAA1C;;0BAEYzD,KAAZ,EAAsB+D,gBAAtB;;SAEG/D,KAAP;;;ACZa,SAASgE,OAAT,GAAqC;MAApBhE,KAAoB,uEAAZ,EAAY;MAARD,MAAQ;;UAC1C,IAAR;SACOA,OAAO6B,IAAP,IAAe,SAApB;cACUC,GAAR,CAAY,QAAZ,EAAsB9B,MAAtB;0BAEKC,KADL,qBAEGD,OAAO+B,IAAP,CAAYjC,IAFf,EAEsB,SAFtB;;SAKGE,OAAO6B,IAAP,IAAe,SAApB;0BAEO5B,KADL,qBAEGD,OAAO+B,IAAP,CAAYjC,IAFf,EAEsB,SAFtB;;SAKGE,OAAO6B,IAAP,IAAe,SAApB;0BAEO5B,KADL,qBAEGD,OAAO+B,IAAP,CAAYjC,IAFf,EAEsB,SAFtB;;SAKGG,KAAP;;;ACjBF,cAAe;gBAAA;kBAAA;;CAAf;;ACDA,UAAe;gBAAA;gBAAA;;CAAf;;"}